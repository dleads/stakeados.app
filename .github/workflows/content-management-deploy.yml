name: Content Management System Deployment

on:
  push:
    branches: [main]
    paths:
      - 'src/components/articles/**'
      - 'src/components/news/**'
      - 'src/components/editorial/**'
      - 'src/lib/services/**'
      - 'src/app/api/**'
      - 'supabase/migrations/**'
      - 'src/types/content.ts'
      - 'src/types/news.ts'
      - 'src/types/editorial.ts'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests (emergency deployment)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/content-management

jobs:
  # Pre-deployment validation
  validate:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      environment: ${{ steps.check.outputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check deployment conditions
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

  # Content management specific tests
  content-tests:
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_deploy == 'true' && github.event.inputs.skip_tests != 'true'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: stakeados_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/stakeados_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY_TEST }}" >> .env.test

      - name: Run database migrations
        run: |
          npx supabase db reset --db-url postgresql://postgres:postgres@localhost:5432/stakeados_test

      - name: Run content management unit tests
        run: |
          npm run test:run -- src/components/articles src/components/news src/lib/services

      - name: Run content management integration tests
        run: |
          npm run test:run -- src/test/integration/articleWorkflow.test.ts
          npm run test:run -- src/test/integration/newsAggregationWorkflow.test.ts
          npm run test:run -- src/test/integration/multilingualSEO.test.ts

      - name: Run content management E2E tests
        run: |
          npm run build
          npm run test:e2e -- e2e/content-management.spec.ts

      - name: Test AI processing pipeline
        run: |
          npm run test:run -- src/lib/services/__tests__/aiContentService.test.ts
          npm run test:run -- src/lib/services/__tests__/contentModerationService.test.ts

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: content-test-results
          path: |
            coverage/
            test-results/
            playwright-report/

  # Build and containerize
  build:
    runs-on: ubuntu-latest
    needs: [validate, content-tests]
    if: needs.validate.outputs.should_deploy == 'true' && (success() || github.event.inputs.skip_tests == 'true')

    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Output image
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: needs.validate.outputs.environment == 'staging'
    environment: staging

    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying ${{ needs.build.outputs.image }} to staging environment"
          # Add your staging deployment logic here
          # This could be Kubernetes, Docker Swarm, or cloud provider specific

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against staging environment"
          # Add smoke tests for critical content management features

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: 'Content Management System deployed to staging'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: needs.validate.outputs.environment == 'production'
    environment: production

    steps:
      - name: Create deployment
        uses: actions/github-script@v7
        id: deployment
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Content Management System deployment',
              auto_merge: false,
              required_contexts: []
            });
            return deployment.data.id;

      - name: Deploy to production
        run: |
          echo "Deploying ${{ needs.build.outputs.image }} to production environment"
          # Add your production deployment logic here

      - name: Update deployment status
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              description: 'Content Management System deployment ${{ job.status }}',
              environment_url: 'https://stakeados.com'
            });

      - name: Run production health checks
        run: |
          echo "Running production health checks"
          # Add health checks for content management endpoints

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: 'Content Management System deployed to production'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback capability
  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch'
    needs: [deploy-staging, deploy-production]
    environment: production

    steps:
      - name: Rollback deployment
        run: |
          echo "Rolling back to previous version"
          # Add rollback logic here

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          channel: '#deployments'
          text: 'Content Management System rolled back due to deployment failure'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
