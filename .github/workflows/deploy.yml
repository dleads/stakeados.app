name: Deploy Stakeados Admin

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Environment validation
  validate:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      should-deploy: ${{ steps.set-env.outputs.should-deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=preview" >> $GITHUB_OUTPUT
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # Security and dependency checks
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Check for vulnerabilities
        run: |
          npm audit --json > audit-results.json
          if [ $(jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical' audit-results.json) -gt 0 ]; then
            echo "High or critical vulnerabilities found!"
            exit 1
          fi

  # Code quality checks
  quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npm run type-check

      - name: Check code formatting
        run: npm run format:check

  # Test suite
  test:
    runs-on: ubuntu-latest
    if: ${{ !github.event.inputs.skip_tests }}
    strategy:
      matrix:
        test-type: [unit, integration]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ${{ matrix.test-type }} tests
        run: npm run test:${{ matrix.test-type }}
        env:
          NODE_ENV: test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            coverage/
            test-results/
            junit.xml

  # E2E tests
  e2e:
    runs-on: ubuntu-latest
    if: ${{ !github.event.inputs.skip_tests && needs.validate.outputs.should-deploy == 'true' }}
    needs: [validate, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production
          PORT: 3000

      - name: Wait for application
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          BASE_URL: http://localhost:3000

      - name: Upload E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: |
            test-results/
            playwright-report/

  # Build and optimize
  build:
    runs-on: ubuntu-latest
    needs: [validate, security, quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate environment variables
        run: node scripts/deployment/env-validator.js
        env:
          NODE_ENV: ${{ needs.validate.outputs.environment }}

      - name: Build application
        run: node scripts/deployment/optimize-build.js
        env:
          NODE_ENV: ${{ needs.validate.outputs.environment }}
          ANALYZE: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            out/
            performance-report.json

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: .next/analyze/

  # Database migrations
  migrate:
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: needs.validate.outputs.should-deploy == 'true'
    environment: ${{ needs.validate.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Run database migrations
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
          supabase db push --include-all
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

  # Deploy to Vercel
  deploy:
    runs-on: ubuntu-latest
    needs: [validate, build, migrate]
    if: needs.validate.outputs.should-deploy == 'true'
    environment: ${{ needs.validate.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: ${{ needs.validate.outputs.environment == 'production' && '--prod' || '' }}
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # Post-deployment validation
  validate-deployment:
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: needs.validate.outputs.should-deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for deployment
        run: sleep 60

      - name: Run health checks
        run: |
          if [[ "${{ needs.validate.outputs.environment }}" == "production" ]]; then
            HEALTH_URL="https://stakeados.com/api/health"
          else
            HEALTH_URL="https://staging.stakeados.com/api/health"
          fi

          curl -f $HEALTH_URL || exit 1

      - name: Run performance validation
        run: node scripts/deployment/performance-check.js
        env:
          BASE_URL: ${{ needs.validate.outputs.environment == 'production' && 'https://stakeados.com' || 'https://staging.stakeados.com' }}

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-validation
          path: performance-validation-report.json

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [validate, deploy, validate-deployment]
    if: always() && needs.validate.outputs.should-deploy == 'true'
    steps:
      - name: Notify Slack on success
        if: needs.validate-deployment.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            üöÄ Stakeados successfully deployed to ${{ needs.validate.outputs.environment }}

            ‚Ä¢ Environment: ${{ needs.validate.outputs.environment }}
            ‚Ä¢ Commit: ${{ github.sha }}
            ‚Ä¢ Branch: ${{ github.ref_name }}
            ‚Ä¢ Actor: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: needs.validate-deployment.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ‚ùå Stakeados deployment to ${{ needs.validate.outputs.environment }} failed

            ‚Ä¢ Environment: ${{ needs.validate.outputs.environment }}
            ‚Ä¢ Commit: ${{ github.sha }}
            ‚Ä¢ Branch: ${{ github.ref_name }}
            ‚Ä¢ Actor: ${{ github.actor }}

            Please check the GitHub Actions logs for details.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback job (manual trigger)
  rollback:
    runs-on: ubuntu-latest
    if: failure() && needs.validate.outputs.should-deploy == 'true'
    needs: [validate, deploy]
    environment: ${{ needs.validate.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback deployment
        run: |
          echo "Initiating rollback for ${{ needs.validate.outputs.environment }}"
          # Implement rollback logic here
          # This could involve:
          # - Reverting to previous Vercel deployment
          # - Restoring database backup
          # - Notifying team

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: warning
          text: |
            ‚ö†Ô∏è Rollback initiated for Stakeados ${{ needs.validate.outputs.environment }}

            ‚Ä¢ Environment: ${{ needs.validate.outputs.environment }}
            ‚Ä¢ Commit: ${{ github.sha }}
            ‚Ä¢ Reason: Deployment validation failed
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
