import { NextRequest, NextResponse } from 'next/server';
import { requireAdmin } from '@/lib/auth/apiAuth';

export async function GET(request: NextRequest) {
  try {
    const admin = await requireAdmin(request);
    if (!admin.success) {
      return NextResponse.json(
        { error: admin.error || 'Forbidden' },
        { status: admin.status || 403 }
      );
    }
    const supabase = admin.supabase!;

    // Get SEO configuration from system settings
    const { data: settings, error } = await (supabase as any)
      .from('system_settings')
      .select('value')
      .eq('key', 'seo_config')
      .single();

    if (error && error.code !== 'PGRST116') {
      console.error('Error fetching SEO config:', error);
      return NextResponse.json(
        { error: 'Failed to fetch configuration' },
        { status: 500 }
      );
    }

    // Default configuration if none exists
    const defaultConfig = {
      global: {
        siteName: 'Stakeados',
        siteDescription:
          'Your trusted source for cryptocurrency news and education',
        defaultTitle: 'Stakeados - Crypto News & Education',
        titleTemplate: '%s | Stakeados',
        defaultImage: '/images/og-default.jpg',
        twitterHandle: '@stakeados',
        facebookAppId: '',
      },
      articles: {
        titleTemplate: '%title% | Stakeados',
        descriptionTemplate: '%summary% - Read more on Stakeados',
        autoGenerateDescription: true,
        maxDescriptionLength: 160,
        includeAuthor: true,
        includePublishDate: true,
      },
      news: {
        titleTemplate: '%title% | Stakeados News',
        descriptionTemplate: '%summary% - Latest crypto news on Stakeados',
        autoGenerateDescription: true,
        maxDescriptionLength: 160,
        includeSource: true,
      },
      sitemap: {
        enabled: true,
        includeImages: true,
        changeFrequency: 'weekly',
        priority: 0.8,
      },
      robots: {
        enabled: true,
        allowIndexing: true,
        crawlDelay: 1,
        customRules: [],
      },
      analytics: {
        googleAnalyticsId: '',
        googleTagManagerId: '',
        facebookPixelId: '',
        enabled: false,
      },
    };

    const config = settings?.value || defaultConfig;

    return NextResponse.json(config);
  } catch (error) {
    console.error('Error in SEO config GET:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

export async function PUT(request: NextRequest) {
  try {
    const admin = await requireAdmin(request);
    if (!admin.success) {
      return NextResponse.json(
        { error: admin.error || 'Forbidden' },
        { status: admin.status || 403 }
      );
    }
    const supabase = admin.supabase!;

    const config = await request.json();

    // Validate configuration
    if (
      !config.global ||
      !config.articles ||
      !config.news ||
      !config.sitemap ||
      !config.robots ||
      !config.analytics
    ) {
      return NextResponse.json(
        { error: 'Invalid configuration structure' },
        { status: 400 }
      );
    }

    // Upsert configuration
    const { error } = await (supabase as any).from('system_settings').upsert({
      key: 'seo_config',
      value: config,
      updated_by: admin.user.id,
      updated_at: new Date().toISOString(),
    });

    if (error) {
      console.error('Error saving SEO config:', error);
      return NextResponse.json(
        { error: 'Failed to save configuration' },
        { status: 500 }
      );
    }

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error in SEO config PUT:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
