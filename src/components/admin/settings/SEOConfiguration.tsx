'use client';

import { useState, useEffect } from 'react';
import { useTranslations } from 'next-intl';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';
import { Textarea } from '@/components/ui/textarea';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';

import { toast } from 'sonner';
import {
  Loader2,
  Save,
  Plus,
  Trash2,
  Search,
  Globe,
  FileText,
} from 'lucide-react';

interface SEOConfig {
  global: {
    siteName: string;
    siteDescription: string;
    defaultTitle: string;
    titleTemplate: string;
    defaultImage: string;
    twitterHandle: string;
    facebookAppId: string;
  };
  articles: {
    titleTemplate: string;
    descriptionTemplate: string;
    autoGenerateDescription: boolean;
    maxDescriptionLength: number;
    includeAuthor: boolean;
    includePublishDate: boolean;
  };
  news: {
    titleTemplate: string;
    descriptionTemplate: string;
    autoGenerateDescription: boolean;
    maxDescriptionLength: number;
    includeSource: boolean;
  };
  sitemap: {
    enabled: boolean;
    includeImages: boolean;
    changeFrequency: string;
    priority: number;
  };
  robots: {
    enabled: boolean;
    allowIndexing: boolean;
    crawlDelay: number;
    customRules: string[];
  };
  analytics: {
    googleAnalyticsId?: string;
    googleTagManagerId?: string;
    facebookPixelId?: string;
    enabled: boolean;
  };
}

export default function SEOConfiguration() {
  const t = useTranslations('admin.settings.seo');
  const [config, setConfig] = useState<SEOConfig | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [testingStructuredData, setTestingStructuredData] = useState(false);

  useEffect(() => {
    loadConfiguration();
  }, []);

  const loadConfiguration = async () => {
    try {
      const response = await fetch('/api/admin/settings/seo');
      if (response.ok) {
        const data = await response.json();
        setConfig(data);
      }
    } catch (error) {
      console.error('Error loading SEO configuration:', error);
      toast.error(t('errors.loadFailed'));
    } finally {
      setLoading(false);
    }
  };

  const saveConfiguration = async () => {
    if (!config) return;

    setSaving(true);
    try {
      const response = await fetch('/api/admin/settings/seo', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(config),
      });

      if (response.ok) {
        toast.success(t('success.saved'));
      } else {
        throw new Error('Failed to save configuration');
      }
    } catch (error) {
      console.error('Error saving SEO configuration:', error);
      toast.error(t('errors.saveFailed'));
    } finally {
      setSaving(false);
    }
  };

  const testStructuredData = async () => {
    setTestingStructuredData(true);
    try {
      const response = await fetch(
        '/api/admin/settings/seo/test-structured-data',
        {
          method: 'POST',
        }
      );

      const result = await response.json();
      if (response.ok) {
        toast.success(t('success.structuredDataValid'));
      } else {
        toast.error(t('errors.structuredDataInvalid', { error: result.error }));
      }
    } catch (error) {
      console.error('Error testing structured data:', error);
      toast.error(t('errors.testFailed'));
    } finally {
      setTestingStructuredData(false);
    }
  };

  const updateConfig = (path: string, value: any) => {
    if (!config) return;

    const keys = path.split('.');
    const newConfig = { ...config };
    let current: any = newConfig;

    for (let i = 0; i < keys.length - 1; i++) {
      current = current[keys[i]];
    }
    current[keys[keys.length - 1]] = value;

    setConfig(newConfig);
  };

  const addCustomRobotsRule = () => {
    if (!config) return;

    setConfig({
      ...config,
      robots: {
        ...config.robots,
        customRules: [...config.robots.customRules, ''],
      },
    });
  };

  const updateCustomRobotsRule = (index: number, value: string) => {
    if (!config) return;

    const newRules = [...config.robots.customRules];
    newRules[index] = value;

    setConfig({
      ...config,
      robots: {
        ...config.robots,
        customRules: newRules,
      },
    });
  };

  const removeCustomRobotsRule = (index: number) => {
    if (!config) return;

    setConfig({
      ...config,
      robots: {
        ...config.robots,
        customRules: config.robots.customRules.filter((_, i) => i !== index),
      },
    });
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center p-8">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  if (!config) {
    return (
      <div className="text-center p-8">
        <p className="text-gray-500">{t('errors.noConfig')}</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Global SEO Settings */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Globe className="h-5 w-5" />
            {t('global.title')}
          </CardTitle>
          <CardDescription>{t('global.description')}</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="siteName">{t('global.siteName')}</Label>
              <Input
                id="siteName"
                value={config.global.siteName}
                onChange={e => updateConfig('global.siteName', e.target.value)}
                placeholder="Stakeados"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="defaultTitle">{t('global.defaultTitle')}</Label>
              <Input
                id="defaultTitle"
                value={config.global.defaultTitle}
                onChange={e =>
                  updateConfig('global.defaultTitle', e.target.value)
                }
                placeholder="Stakeados - Crypto News & Education"
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="siteDescription">
              {t('global.siteDescription')}
            </Label>
            <Textarea
              id="siteDescription"
              value={config.global.siteDescription}
              onChange={e =>
                updateConfig('global.siteDescription', e.target.value)
              }
              placeholder="Your trusted source for cryptocurrency news and education"
              rows={3}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="titleTemplate">{t('global.titleTemplate')}</Label>
            <Input
              id="titleTemplate"
              value={config.global.titleTemplate}
              onChange={e =>
                updateConfig('global.titleTemplate', e.target.value)
              }
              placeholder="%s | Stakeados"
            />
            <p className="text-xs text-gray-500">
              {t('global.titleTemplateHelp')}
            </p>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="twitterHandle">{t('global.twitterHandle')}</Label>
              <Input
                id="twitterHandle"
                value={config.global.twitterHandle}
                onChange={e =>
                  updateConfig('global.twitterHandle', e.target.value)
                }
                placeholder="@stakeados"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="facebookAppId">{t('global.facebookAppId')}</Label>
              <Input
                id="facebookAppId"
                value={config.global.facebookAppId}
                onChange={e =>
                  updateConfig('global.facebookAppId', e.target.value)
                }
                placeholder="123456789"
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Article SEO Settings */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileText className="h-5 w-5" />
            {t('articles.title')}
          </CardTitle>
          <CardDescription>{t('articles.description')}</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="autoGenerateArticleDescription"
              checked={config.articles.autoGenerateDescription}
              onCheckedChange={checked =>
                updateConfig('articles.autoGenerateDescription', checked)
              }
            />
            <Label htmlFor="autoGenerateArticleDescription">
              {t('articles.autoGenerateDescription')}
            </Label>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="articleTitleTemplate">
                {t('articles.titleTemplate')}
              </Label>
              <Input
                id="articleTitleTemplate"
                value={config.articles.titleTemplate}
                onChange={e =>
                  updateConfig('articles.titleTemplate', e.target.value)
                }
                placeholder="%title% | Stakeados"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="maxArticleDescriptionLength">
                {t('articles.maxDescriptionLength')}
              </Label>
              <Input
                id="maxArticleDescriptionLength"
                type="number"
                value={config.articles.maxDescriptionLength}
                onChange={e =>
                  updateConfig(
                    'articles.maxDescriptionLength',
                    parseInt(e.target.value)
                  )
                }
                min="100"
                max="300"
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="articleDescriptionTemplate">
              {t('articles.descriptionTemplate')}
            </Label>
            <Textarea
              id="articleDescriptionTemplate"
              value={config.articles.descriptionTemplate}
              onChange={e =>
                updateConfig('articles.descriptionTemplate', e.target.value)
              }
              placeholder="%summary% - Read more on Stakeados"
              rows={2}
            />
          </div>

          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2">
              <Switch
                id="includeAuthor"
                checked={config.articles.includeAuthor}
                onCheckedChange={checked =>
                  updateConfig('articles.includeAuthor', checked)
                }
              />
              <Label htmlFor="includeAuthor">
                {t('articles.includeAuthor')}
              </Label>
            </div>

            <div className="flex items-center space-x-2">
              <Switch
                id="includePublishDate"
                checked={config.articles.includePublishDate}
                onCheckedChange={checked =>
                  updateConfig('articles.includePublishDate', checked)
                }
              />
              <Label htmlFor="includePublishDate">
                {t('articles.includePublishDate')}
              </Label>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* News SEO Settings */}
      <Card>
        <CardHeader>
          <CardTitle>{t('news.title')}</CardTitle>
          <CardDescription>{t('news.description')}</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="autoGenerateNewsDescription"
              checked={config.news.autoGenerateDescription}
              onCheckedChange={checked =>
                updateConfig('news.autoGenerateDescription', checked)
              }
            />
            <Label htmlFor="autoGenerateNewsDescription">
              {t('news.autoGenerateDescription')}
            </Label>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="newsTitleTemplate">
                {t('news.titleTemplate')}
              </Label>
              <Input
                id="newsTitleTemplate"
                value={config.news.titleTemplate}
                onChange={e =>
                  updateConfig('news.titleTemplate', e.target.value)
                }
                placeholder="%title% | Stakeados News"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="maxNewsDescriptionLength">
                {t('news.maxDescriptionLength')}
              </Label>
              <Input
                id="maxNewsDescriptionLength"
                type="number"
                value={config.news.maxDescriptionLength}
                onChange={e =>
                  updateConfig(
                    'news.maxDescriptionLength',
                    parseInt(e.target.value)
                  )
                }
                min="100"
                max="300"
              />
            </div>
          </div>

          <div className="flex items-center space-x-2">
            <Switch
              id="includeSource"
              checked={config.news.includeSource}
              onCheckedChange={checked =>
                updateConfig('news.includeSource', checked)
              }
            />
            <Label htmlFor="includeSource">{t('news.includeSource')}</Label>
          </div>
        </CardContent>
      </Card>

      {/* Sitemap Configuration */}
      <Card>
        <CardHeader>
          <CardTitle>{t('sitemap.title')}</CardTitle>
          <CardDescription>{t('sitemap.description')}</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="sitemapEnabled"
              checked={config.sitemap.enabled}
              onCheckedChange={checked =>
                updateConfig('sitemap.enabled', checked)
              }
            />
            <Label htmlFor="sitemapEnabled">{t('sitemap.enabled')}</Label>
          </div>

          {config.sitemap.enabled && (
            <div className="space-y-4">
              <div className="flex items-center space-x-2">
                <Switch
                  id="includeImages"
                  checked={config.sitemap.includeImages}
                  onCheckedChange={checked =>
                    updateConfig('sitemap.includeImages', checked)
                  }
                />
                <Label htmlFor="includeImages">
                  {t('sitemap.includeImages')}
                </Label>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="changeFrequency">
                    {t('sitemap.changeFrequency')}
                  </Label>
                  <Input
                    id="changeFrequency"
                    value={config.sitemap.changeFrequency}
                    onChange={e =>
                      updateConfig('sitemap.changeFrequency', e.target.value)
                    }
                    placeholder="weekly"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="priority">{t('sitemap.priority')}</Label>
                  <Input
                    id="priority"
                    type="number"
                    step="0.1"
                    min="0"
                    max="1"
                    value={config.sitemap.priority}
                    onChange={e =>
                      updateConfig(
                        'sitemap.priority',
                        parseFloat(e.target.value)
                      )
                    }
                  />
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Robots.txt Configuration */}
      <Card>
        <CardHeader>
          <CardTitle>{t('robots.title')}</CardTitle>
          <CardDescription>{t('robots.description')}</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="robotsEnabled"
              checked={config.robots.enabled}
              onCheckedChange={checked =>
                updateConfig('robots.enabled', checked)
              }
            />
            <Label htmlFor="robotsEnabled">{t('robots.enabled')}</Label>
          </div>

          {config.robots.enabled && (
            <div className="space-y-4">
              <div className="flex items-center space-x-2">
                <Switch
                  id="allowIndexing"
                  checked={config.robots.allowIndexing}
                  onCheckedChange={checked =>
                    updateConfig('robots.allowIndexing', checked)
                  }
                />
                <Label htmlFor="allowIndexing">
                  {t('robots.allowIndexing')}
                </Label>
              </div>

              <div className="space-y-2">
                <Label htmlFor="crawlDelay">{t('robots.crawlDelay')}</Label>
                <Input
                  id="crawlDelay"
                  type="number"
                  value={config.robots.crawlDelay}
                  onChange={e =>
                    updateConfig('robots.crawlDelay', parseInt(e.target.value))
                  }
                  min="0"
                  max="60"
                />
              </div>

              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <Label>{t('robots.customRules')}</Label>
                  <Button
                    onClick={addCustomRobotsRule}
                    size="sm"
                    variant="outline"
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    {t('robots.addRule')}
                  </Button>
                </div>
                <div className="space-y-2">
                  {config.robots.customRules.map((rule, index) => (
                    <div key={index} className="flex items-center space-x-2">
                      <Input
                        value={rule}
                        onChange={e =>
                          updateCustomRobotsRule(index, e.target.value)
                        }
                        placeholder="Disallow: /admin"
                      />
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => removeCustomRobotsRule(index)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Analytics Configuration */}
      <Card>
        <CardHeader>
          <CardTitle>{t('analytics.title')}</CardTitle>
          <CardDescription>{t('analytics.description')}</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="analyticsEnabled"
              checked={config.analytics.enabled}
              onCheckedChange={checked =>
                updateConfig('analytics.enabled', checked)
              }
            />
            <Label htmlFor="analyticsEnabled">{t('analytics.enabled')}</Label>
          </div>

          {config.analytics.enabled && (
            <div className="grid grid-cols-3 gap-4">
              <div className="space-y-2">
                <Label htmlFor="googleAnalyticsId">
                  {t('analytics.googleAnalyticsId')}
                </Label>
                <Input
                  id="googleAnalyticsId"
                  value={config.analytics.googleAnalyticsId || ''}
                  onChange={e =>
                    updateConfig('analytics.googleAnalyticsId', e.target.value)
                  }
                  placeholder="GA_MEASUREMENT_ID"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="googleTagManagerId">
                  {t('analytics.googleTagManagerId')}
                </Label>
                <Input
                  id="googleTagManagerId"
                  value={config.analytics.googleTagManagerId || ''}
                  onChange={e =>
                    updateConfig('analytics.googleTagManagerId', e.target.value)
                  }
                  placeholder="GTM-XXXXXXX"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="facebookPixelId">
                  {t('analytics.facebookPixelId')}
                </Label>
                <Input
                  id="facebookPixelId"
                  value={config.analytics.facebookPixelId || ''}
                  onChange={e =>
                    updateConfig('analytics.facebookPixelId', e.target.value)
                  }
                  placeholder="123456789012345"
                />
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Separator />

      {/* Action Buttons */}
      <div className="flex justify-between">
        <Button
          variant="outline"
          onClick={testStructuredData}
          disabled={testingStructuredData}
        >
          {testingStructuredData ? (
            <Loader2 className="h-4 w-4 mr-2 animate-spin" />
          ) : (
            <Search className="h-4 w-4 mr-2" />
          )}
          {t('actions.testStructuredData')}
        </Button>

        <Button onClick={saveConfiguration} disabled={saving}>
          {saving ? (
            <Loader2 className="h-4 w-4 mr-2 animate-spin" />
          ) : (
            <Save className="h-4 w-4 mr-2" />
          )}
          {t('actions.save')}
        </Button>
      </div>
    </div>
  );
}
